{
  "general": [
    {
      "label": "General",
      "group": "general",
      "fields": [
        {
          "label": "Name",
          "id": "clusterName",
          "type": "text",
          "model": "name",
          "required": true,
          "placeholder": "Input name"
        },
        {
          "label": "Caches",
          "id": "caches",
          "type": "dropdown-multiple",
          "model": "caches",
          "placeholder": "Choose caches",
          "placeholderEmpty": "No caches configured",
          "items": "caches",
          "tip": [
            "Select caches to start in cluster or add a new cache"
          ],
          "addLink": {
            "ref": "/configuration/caches?new"
          }
        },
        {
          "label": "Local host",
          "id": "localHost",
          "type": "text",
          "model": "localHost",
          "placeholder": "0.0.0.0",
          "tip": [
            "System-wide local address or host for all Ignite components to bind to"
          ]
        },
        {
          "label": "Discovery",
          "id": "discovery",
          "type": "dropdown-details",
          "settings": false,
          "path": "discovery",
          "model": "kind",
          "items": "discoveries",
          "tip": [
            "Discovery allows to discover remote nodes in grid"
          ],
          "details": {
            "Vm": {
              "fields": [
                {
                  "label": "Addresses",
                  "type": "table-simple",
                  "path": "discovery.Vm",
                  "model": "addresses",
                  "reordering": true,
                  "ipaddress": true,
                  "placeholder": "IP address:port",
                  "focusId": "IpAddress",
                  "addTip": "Add new address.",
                  "removeTip": "Remove address",
                  "tableTip": [
                    "Addresses may be represented as follows:",
                    "<ul>",
                    "  <li>IP address (e.g. 127.0.0.1, 9.9.9.9, etc)</li>",
                    "  <li>IP address and port (e.g. 127.0.0.1:47500, 9.9.9.9:47501, etc)</li>",
                    "  <li>IP address and port range (e.g. 127.0.0.1:47500..47510, 9.9.9.9:47501..47504, etc)</li>",
                    "  <li>Hostname (e.g. host1.com, host2, etc)</li>",
                    "  <li>Hostname and port (e.g. host1.com:47500, host2:47502, etc)</li>",
                    "  <li>Hostname and port range (e.g. host1.com:47500..47510, host2:47502..47508, etc)</li>",
                    "</ul>",
                    "If port is 0 or not provided then default port will be used (depends on discovery SPI configuration)",
                    "If port range is provided (e.g. host:port1..port2) the following should be considered:",
                    "<ul>",
                    "  <li>port1 < port2 should be true</li>",
                    "  <li>Both port1 and port2 should be greater than 0</li>",
                    "</ul>"
                  ]
                }
              ]
            },
            "Multicast": {
              "fields": [
                {
                  "label": "IP address",
                  "type": "text",
                  "path": "discovery.Multicast",
                  "model": "multicastGroup",
                  "placeholder": "228.1.2.4",
                  "tip": [
                    "IP address of multicast group"
                  ]
                },
                {
                  "label": "Port number",
                  "type": "number",
                  "path": "discovery.Multicast",
                  "model": "multicastPort",
                  "max": 65535,
                  "placeholder": 47400,
                  "tip": [
                    "Port number which multicast messages are sent to"
                  ]
                },
                {
                  "label": "Waits for reply",
                  "type": "number",
                  "path": "discovery.Multicast",
                  "model": "responseWaitTime",
                  "placeholder": 500,
                  "tip": [
                    "Time in milliseconds IP finder waits for reply to multicast address request"
                  ]
                },
                {
                  "label": "Attempts count",
                  "type": "number",
                  "path": "discovery.Multicast",
                  "model": "addressRequestAttempts",
                  "placeholder": 2,
                  "tip": [
                    "Number of attempts to send multicast address request",
                    "IP finder re-sends request only in case if no reply for previous request is received"
                  ]
                },
                {
                  "label": "Local address",
                  "type": "text",
                  "path": "discovery.Multicast",
                  "model": "localAddress",
                  "tip": [
                    "Local host address used by this IP finder",
                    "If provided address is non-loopback then multicast socket is bound to this interface",
                    "If local address is not set or is any local address then IP finder creates multicast sockets for all found non-loopback addresses"
                  ]
                },
                {
                  "label": "Addresses",
                  "type": "table-simple",
                  "path": "discovery.Multicast",
                  "model": "addresses",
                  "reordering": true,
                  "ipaddress": true,
                  "placeholder": "IP address:port",
                  "focusId": "IpAddress",
                  "addTip": "Add new address",
                  "removeTip": "Remove address",
                  "tableTip": [
                    "Addresses may be represented as follows:",
                    "<ul>",
                    "  <li>IP address (e.g. 127.0.0.1, 9.9.9.9, etc)</li>",
                    "  <li>IP address and port (e.g. 127.0.0.1:47500, 9.9.9.9:47501, etc)</li>",
                    "  <li>IP address and port range (e.g. 127.0.0.1:47500..47510, 9.9.9.9:47501..47504, etc)</li>",
                    "  <li>Hostname (e.g. host1.com, host2, etc)</li>",
                    "  <li>Hostname and port (e.g. host1.com:47500, host2:47502, etc)</li>",
                    "  <li>Hostname and port range (e.g. host1.com:47500..47510, host2:47502..47508, etc)</li>",
                    "</ul>",
                    "If port is 0 or not provided then default port will be used (depends on discovery SPI configuration)",
                    "If port range is provided (e.g. host:port1..port2) the following should be considered:",
                    "<ul>",
                    "  <li>port1 < port2 should be true</li>",
                    "  <li>Both port1 and port2 should be greater than 0</li>",
                    "</ul>"
                  ]
                }
              ]
            },
            "S3": {
              "fields": [
                {
                  "label": "Bucket name",
                  "type": "text",
                  "required": true,
                  "path": "discovery.S3",
                  "model": "bucketName",
                  "tip": [
                    "Bucket name for IP finder"
                  ]
                },
                {
                  "label": "Note, AWS credentials will be generated as stubs.",
                  "type": "label"
                }
              ]
            },
            "Cloud": {
              "fields": [
                {
                  "label": "Credential",
                  "type": "text",
                  "path": "discovery.Cloud",
                  "model": "credential",
                  "tip": [
                    "Credential that is used during authentication on the cloud",
                    "Depending on a cloud platform it can be a password or access key"
                  ]
                },
                {
                  "label": "Path to credential",
                  "type": "text",
                  "path": "discovery.Cloud",
                  "model": "credentialPath",
                  "tip": [
                    "Path to a credential that is used during authentication on the cloud",
                    "Access key or private key should be stored in a plain or PEM file without a passphrase"
                  ]
                },
                {
                  "label": "Identity",
                  "type": "text",
                  "required": true,
                  "path": "discovery.Cloud",
                  "model": "identity",
                  "tip": [
                    "Identity that is used as a user name during a connection to the cloud",
                    "Depending on a cloud platform it can be an email address, user name, etc"
                  ]
                },
                {
                  "label": "Provider",
                  "type": "text",
                  "required": true,
                  "path": "discovery.Cloud",
                  "model": "provider",
                  "tip": [
                    "Cloud provider to use"
                  ]
                },
                {
                  "label": "Regions",
                  "type": "table-simple",
                  "path": "discovery.Cloud",
                  "model": "regions",
                  "placeholder": "Region name",
                  "focusId": "Region",
                  "addTip": "Add new region",
                  "removeTip": "Remove region",
                  "tableTip": [
                    "List of regions where VMs are located",
                    "If the regions are not set then every region, that a cloud provider has, will be investigated. This could lead to significant performance degradation",
                    "Note, that some cloud providers, like Google Compute Engine, doesn't have a notion of a region. For such providers regions are redundant"
                  ],
                  "tip": [
                    "Region where VMs are located"
                  ]
                },
                {
                  "label": "Zones",
                  "ui": "table-simple",
                  "type": "table-simple",
                  "path": "discovery.Cloud",
                  "model": "zones",
                  "placeholder": "Zone name",
                  "focusId": "Zone",
                  "addTip": "Add new zone",
                  "removeTip": "Remove zone",
                  "tableTip": [
                    "List of zones where VMs are located",
                    "If the zones are not set then every zone from specified regions, will be taken into account",
                    "Note, that some cloud providers, like Rackspace, doesn't have a notion of a zone. For such providers zones are redundant"
                  ],
                  "tip": [
                    "Zone where VMs are located"
                  ]
                }
              ]
            },
            "GoogleStorage": {
              "fields": [
                {
                  "label": "Project name",
                  "type": "text",
                  "required": true,
                  "path": "discovery.GoogleStorage",
                  "model": "projectName",
                  "tip": [
                    "Google Cloud Platforms project name",
                    "Usually this is an auto generated project number (ex. 208709979073) that can be found in 'Overview' section of Google Developer Console"
                  ]
                },
                {
                  "label": "Bucket name",
                  "type": "text",
                  "required": true,
                  "path": "discovery.GoogleStorage",
                  "model": "bucketName",
                  "tip": [
                    "Google Cloud Storage bucket name",
                    "If the bucket doesn't exist Ignite will automatically create it",
                    "However the name must be unique across whole Google Cloud Storage and Service Account Id must be authorized to perform this operation"
                  ]
                },
                {
                  "label": "Private key path",
                  "type": "text",
                  "required": true,
                  "path": "discovery.GoogleStorage",
                  "model": "serviceAccountP12FilePath",
                  "tip": [
                    "Full path to the private key in PKCS12 format of the Service Account"
                  ]
                },
                {
                  "label": "Account id",
                  "type": "text",
                  "required": true,
                  "path": "discovery.GoogleStorage",
                  "model": "serviceAccountId",
                  "tip": [
                    "Service account ID (typically an e-mail address)"
                  ]
                }
              ]
            },
            "Jdbc": {
              "fields": [
                {
                  "label": "DB schema should be initialized by Ignite",
                  "type": "check",
                  "path": "discovery.Jdbc",
                  "model": "initSchema",
                  "tip": [
                    "Flag indicating whether DB schema should be initialized by Ignite or was explicitly created by user"
                  ]
                }
              ]
            },
            "SharedFs": {
              "fields": [
                {
                  "label": "File path",
                  "type": "text",
                  "path": "discovery.SharedFs",
                  "model": "path",
                  "placeholder": "disco/tcp"
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "advanced": [
    {
      "label": "Atomic configuration",
      "group": "atomics",
      "tip": [
        "Configuration for atomic data structures",
        "Atomics are distributed across the cluster, essentially enabling performing atomic operations (such as increment-and-get or compare-and-set) with the same globally-visible value"
      ],
      "fields": [
        {
          "label": "Cache mode",
          "id": "cacheMode",
          "type": "dropdown",
          "path": "atomicConfiguration",
          "model": "cacheMode",
          "placeholder": "PARTITIONED",
          "items": "cacheModes",
          "tip": [
            "Cache modes:",
            "<ul>",
            "  <li>Partitioned - in this mode the overall key set will be divided into partitions and all partitions will be split equally between participating nodes</li>",
            "  <li>Replicated - in this mode all the keys are distributed to all participating nodes</li>",
            "  <li>Local - in this mode caches residing on different grid nodes will not know about each other</li>",
            "</ul>"
          ]
        },
        {
          "label": "Sequence reserve",
          "id": "atomicSequenceReserveSize",
          "type": "number",
          "path": "atomicConfiguration",
          "model": "atomicSequenceReserveSize",
          "placeholder": 1000,
          "tip": [
            "Default number of sequence values reserved for IgniteAtomicSequence instances",
            "After a certain number has been reserved, consequent increments of sequence will happen locally, without communication with other nodes, until the next reservation has to be made"
          ]
        },
        {
          "label": "Backups",
          "id": "backups",
          "type": "number",
          "path": "atomicConfiguration",
          "model": "backups",
          "hide": "backupItem.atomicConfiguration &&  backupItem.atomicConfiguration.cacheMode && backupItem.atomicConfiguration.cacheMode != 'PARTITIONED'",
          "placeholder": 0,
          "tip": [
            "Number of backup nodes"
          ]
        }
      ]
    },
    {
      "label": "Binary configuration",
      "group": "binary",
      "tip": [
        "Configuration for Ignite Binary Objects"
      ],
      "fields": [
        {
          "label": "ID mapper",
          "id": "idMapper",
          "type": "text",
          "path": "binaryConfiguration",
          "model": "idMapper",
          "placeholder": "Enter fully qualified class name",
          "tip": [
            "Type and field ID mapper for binary objects",
            "Ignite never writes full strings for field or type names. Instead, for performance reasons, Ignite writes integer hash codes for type and field names. It has been tested that hash code conflicts for the type names or the field names within the same type are virtually non-existent and, to gain performance, it is safe to work with hash codes. For the cases when hash codes for different types or fields actually do collide <b>BinaryIdMapper</b> allows to override the automatically generated hash code IDs for the type and field names"
          ]
        },
        {
          "label": "Serializer",
          "id": "serializer",
          "type": "text",
          "path": "binaryConfiguration",
          "model": "serializer",
          "placeholder": "Enter fully qualified class name",
          "tip": [
            "Class with custom serialization logic for binary objects"
          ]
        },
        {
          "label": "Type configurations",
          "id": "typeConfigurations",
          "type": "text",
          "path": "binaryConfiguration",
          "model": "typeConfigurations",
          "placeholder": "TODO table",
          "tip": [
            "Configuration properties for binary types"
          ]
        },
        {
          "label": "Compact footer",
          "id": "compactFooter",
          "type": "check",
          "path": "binaryConfiguration",
          "model": "compactFooter",
          "tip": [
            "When enabled, Ignite will not write fields metadata when serializing objects(this will increase serialization performance), because internally <b>BinaryMarshaller</b> already distribute metadata inside cluster"
          ]
        }
      ]
    },
    {
      "label": "Communication",
      "group": "communication",
      "tip": [
        "Cluster communication network properties"
      ],
      "fields": [
        {
          "label": "Timeout",
          "id": "networkTimeout",
          "type": "number",
          "model": "networkTimeout",
          "placeholder": 5000,
          "tip": [
            "Maximum timeout in milliseconds for network requests"
          ]
        },
        {
          "label": "Send retry delay",
          "id": "networkSendRetryDelay",
          "type": "number",
          "model": "networkSendRetryDelay",
          "placeholder": 1000,
          "tip": [
            "Interval in milliseconds between message send retries"
          ]
        },
        {
          "label": "Send retry count",
          "id": "networkSendRetryCount",
          "type": "number",
          "model": "networkSendRetryCount",
          "placeholder": 3,
          "tip": [
            "Message send retries count"
          ]
        },
        {
          "label": "Discovery startup delay",
          "id": "discoveryStartupDelay",
          "type": "number",
          "model": "discoveryStartupDelay",
          "placeholder": 600000,
          "tip": [
            "This value is used to expire messages from waiting list whenever node discovery discrepancies happen"
          ]
        },
        {
          "label": "Communication listener",
          "id": "comListener",
          "type": "text",
          "path": "communication",
          "model": "listener",
          "placeholder": "Enter fully qualified class name",
          "tip": [
            "Communication listener"
          ]
        },
        {
          "label": "Local IP address",
          "id": "comLocalAddress",
          "type": "text",
          "path": "communication",
          "model": "localAddress",
          "placeholder": "228.1.2.4",
          "tip": [
            "Local host address for socket binding"
          ]
        },
        {
          "label": "Local port",
          "id": "comLocalPort",
          "type": "number",
          "path": "communication",
          "model": "localPort",
          "min": 1024,
          "max": 65535,
          "placeholder": 47100,
          "tip": [
            "Local port for socket binding"
          ]
        },
        {
          "label": "Local port range",
          "id": "comLocalPortRange",
          "type": "number",
          "path": "communication",
          "model": "localPortRange",
          "placeholder": 100,
          "tip": [
            "Local port range for local host ports"
          ]
        },
        {
          "label": "Shared memory port",
          "id": "sharedMemoryPort",
          "type": "number",
          "path": "communication",
          "model": "sharedMemoryPort",
          "max": 65535,
          "placeholder": 48100,
          "tip": [
            "Local port to accept shared memory connections"
          ]
        },
        {
          "label": "Direct buffer",
          "id": "directBuffer",
          "type": "check",
          "path": "communication",
          "model": "directBuffer",
          "tip": [
            "If value is true, then SPI will use ByteBuffer.allocateDirect(int) call",
            "Otherwise, SPI will use ByteBuffer.allocate(int) call."
          ]
        },
        {
          "label": "Direct send buffer",
          "id": "directSendBuffer",
          "type": "check",
          "path": "communication",
          "model": "directSendBuffer",
          "tip": [
            "Flag defining whether direct send buffer should be used"
          ]
        },
        {
          "label": "Idle connection timeout",
          "id": "idleConnectionTimeout",
          "type": "number",
          "path": "communication",
          "model": "idleConnectionTimeout",
          "placeholder": 30000,
          "tip": [
            "Maximum idle connection timeout upon which a connection to client will be closed"
          ]
        },
        {
          "label": "Connect timeout",
          "id": "connectTimeout",
          "type": "number",
          "path": "communication",
          "model": "connectTimeout",
          "placeholder": 5000,
          "tip": [
            "Connect timeout used when establishing connection with remote nodes"
          ]
        },
        {
          "label": "Maximum connect timeout",
          "id": "maxConnectTimeout",
          "type": "number",
          "path": "communication",
          "model": "maxConnectTimeout",
          "placeholder": 600000,
          "tip": [
            "Maximum connect timeout"
          ]
        },
        {
          "label": "Reconnect count",
          "id": "comReconnectCount",
          "type": "number",
          "path": "communication",
          "model": "reconnectCount",
          "placeholder": 10,
          "tip": [
            "Maximum number of reconnect attempts used when establishing connection with remote nodes"
          ]
        },
        {
          "label": "Socket send buffer",
          "id": "socketSendBuffer",
          "type": "number",
          "path": "communication",
          "model": "socketSendBuffer",
          "placeholder": 32768,
          "tip": [
            "Send buffer size for sockets created or accepted by this SPI"
          ]
        },
        {
          "label": "Socket receive buffer",
          "id": "socketReceiveBuffer",
          "type": "number",
          "path": "communication",
          "model": "socketReceiveBuffer",
          "placeholder": 32768,
          "tip": [
            "Receive buffer size for sockets created or accepted by this SPI"
          ]
        },
        {
          "label": "Message queue limit",
          "id": "messageQueueLimit",
          "type": "number",
          "path": "communication",
          "model": "messageQueueLimit",
          "placeholder": 1024,
          "tip": [
            "Message queue limit for incoming and outgoing messages"
          ]
        },
        {
          "label": "Slow client queue limit",
          "type": "slowClientQueueLimit",
          "path": "communication",
          "model": "slowClientQueueLimit",
          "tip": [
            "Slow client queue limit"
          ]
        },
        {
          "label": "TCP_NODELAY option",
          "id": "tcpNoDelay",
          "type": "check",
          "path": "communication",
          "model": "tcpNoDelay",
          "tip": [
            "Value for TCP_NODELAY socket option"
          ]
        },
        {
          "label": "Ack send threshold",
          "id": "ackSendThreshold",
          "type": "number",
          "path": "communication",
          "model": "ackSendThreshold",
          "placeholder": 16,
          "tip": [
            "Number of received messages per connection to node after which acknowledgment message is sent"
          ]
        },
        {
          "label": "Unacknowledged messages",
          "id": "unacknowledgedMessagesBufferSize",
          "type": "number",
          "path": "communication",
          "model": "unacknowledgedMessagesBufferSize",
          "placeholder": 0,
          "tip": [
            "Maximum number of stored unacknowledged messages per connection to node"
          ]
        },
        {
          "label": "Socket write timeout",
          "id": "socketWriteTimeout",
          "type": "number",
          "path": "communication",
          "model": "socketWriteTimeout",
          "placeholder": 2000,
          "tip": [
            "Socket write timeout"
          ]
        },
        {
          "label": "Selectors count",
          "id": "selectorsCount",
          "type": "number",
          "path": "communication",
          "model": "selectorsCount",
          "placeholder": 4,
          "tip": [
            "Count of selectors te be used in TCP server"
          ]
        },
        {
          "label": "Address resolver",
          "id": "comAddressResolver",
          "type": "text",
          "path": "communication",
          "model": "addressResolver",
          "placeholder": "Enter fully qualified class name",
          "tip": [
            "Address resolver"
          ]
        }
      ]
    },
    {
      "label": "Connector configuration",
      "group": "connector",
      "previewMinLines": 1,
      "tip": [
        "REST access configuration"
      ],
      "fields": [
        {
          "label": "Enabled",
          "id": "restEnabled",
          "type": "check",
          "path": "connector",
          "model": "enabled",
          "tip": [
            "Flag indicating whether to configure connector configuration"
          ]
        },
        {
          "label": "Jetty configuration path",
          "id": "connectorJettyPath",
          "type": "text",
          "path": "connector",
          "model": "jettyPath",
          "disabled": "!backupItem.connector.enabled",
          "tip": [
            "Path, either absolute or relative to IGNITE_HOME, to Jetty XML configuration file",
            "Jetty is used to support REST over HTTP protocol for accessing Ignite APIs remotely",
            "If not provided, Jetty instance with default configuration will be started picking IgniteSystemProperties.IGNITE_JETTY_HOST and IgniteSystemProperties.IGNITE_JETTY_PORT as host and port respectively"
          ]
        },
        {
          "label": "TCP host",
          "id": "connectorHost",
          "type": "text",
          "path": "connector",
          "model": "host",
          "disabled": "!backupItem.connector.enabled",
          "placeholder": "IgniteConfiguration#getLocalHost()",
          "tip": [
            "Host for TCP binary protocol server",
            "This can be either an IP address or a domain name",
            "If not defined, system-wide local address will be used IgniteConfiguration#getLocalHost()",
            "You can also use '0.0.0.0' value to bind to all locally-available IP addresses"
          ]
        },
        {
          "label": "TCP port",
          "id": "connectorPort",
          "type": "number",
          "path": "connector",
          "model": "port",
          "disabled": "!backupItem.connector.enabled",
          "placeholder": 11211,
          "min": 1024,
          "max": 65535,
          "tip": [
            "Port for TCP binary protocol server"
          ]
        },
        {
          "label": "TCP port range",
          "id": "connectorPortRange",
          "type": "number",
          "path": "connector",
          "model": "portRange",
          "disabled": "!backupItem.connector.enabled",
          "placeholder": 100,
          "tip": [
            "Number of ports for TCP binary protocol server to try if configured port is already in use"
          ]
        },
        {
          "label": "Idle timeout",
          "id": "connectorIdleTimeout",
          "type": "number",
          "path": "connector",
          "model": "idleTimeout",
          "disabled": "!backupItem.connector.enabled",
          "placeholder": 7000,
          "tip": [
            "Idle timeout for REST server",
            "This setting is used to reject half-opened sockets",
            "If no packets come within idle timeout, the connection is closed"
          ]
        },
        {
          "label": "Receive buffer size",
          "id": "connectorReceiveBufferSize",
          "type": "number",
          "path": "connector",
          "model": "receiveBufferSize",
          "disabled": "!backupItem.connector.enabled",
          "placeholder": 32768,
          "tip": [
            "REST TCP server receive buffer size"
          ]
        },
        {
          "label": "Send buffer size",
          "id": "connectorSendBufferSize",
          "type": "number",
          "path": "connector",
          "model": "sendBufferSize",
          "disabled": "!backupItem.connector.enabled",
          "placeholder": 32768,
          "tip": [
            "REST TCP server send buffer size"
          ]
        },
        {
          "label": "Send queue limit",
          "id": "connectorSendQueueLimit",
          "type": "number",
          "path": "connector",
          "model": "sendQueueLimit",
          "disabled": "!backupItem.connector.enabled",
          "placeholder": "unlimited",
          "tip": [
            "REST TCP server send queue limit",
            "If the limit exceeds, all successive writes will block until the queue has enough capacity"
          ]
        },
        {
          "label": "Direct buffer",
          "id": "connectorDirectBuffer",
          "type": "check",
          "path": "connector",
          "model": "directBuffer",
          "disabled": "!backupItem.connector.enabled",
          "tip": [
            "Flag indicating whether REST TCP server should use direct buffers",
            "A direct buffer is a buffer that is allocated and accessed using native system calls, without using JVM heap",
            "Enabling direct buffer may improve performance and avoid memory issues (long GC pauses due to huge buffer size)"
          ]
        },
        {
          "label": "TCP_NODELAY option",
          "id": "connectorNoDelay",
          "type": "check",
          "path": "connector",
          "model": "noDelay",
          "disabled": "!backupItem.connector.enabled",
          "tip": [
            "Flag indicating whether TCP_NODELAY option should be set for accepted client connections",
            "Setting this option reduces network latency and should be enabled in majority of cases",
            "For more information, see Socket#setTcpNoDelay(boolean)"
          ]
        },
        {
          "label": "Selector count",
          "id": "connectorSelectorCount",
          "type": "number",
          "path": "connector",
          "model": "selectorCount",
          "disabled": "!backupItem.connector.enabled",
          "placeholder": "min(4, availableProcessors)",
          "tip": [
            "Number of selector threads in REST TCP server",
            "Higher value for this parameter may increase throughput, but also increases context switching"
          ]
        },
        {
          "label": "Thread pool size",
          "id": "connectorThreadPoolSize",
          "type": "number",
          "path": "connector",
          "model": "threadPoolSize",
          "disabled": "!backupItem.connector.enabled",
          "placeholder": "max(8, availableProcessors) * 2",
          "tip": [
            "Thread pool size to use for processing of client messages (REST requests)"
          ]
        },
        {
          "label": "Message interceptor",
          "id": "connectorMessageInterceptor",
          "type": "text",
          "path": "connector",
          "model": "messageInterceptor",
          "disabled": "!backupItem.connector.enabled",
          "placeholder": "Enter fully qualified class name",
          "tip": [
            "Interceptor allows to transform all objects exchanged via REST protocol",
            "For example if you use custom serialisation on client you can write interceptor to transform binary representations received from client to Java objects and later access them from java code directly"
          ]
        },
        {
          "label": "Secret key",
          "id": "connectorSecretKey",
          "type": "text",
          "path": "connector",
          "model": "secretKey",
          "disabled": "!backupItem.connector.enabled",
          "placeholder": "Specify to enable authentication",
          "tip": [
            "Secret key to authenticate REST requests"
          ]
        },
        {
          "label": "Enable SSL",
          "id": "connectorSslEnabled",
          "type": "check",
          "path": "connector",
          "model": "sslEnabled",
          "disabled": "!backupItem.connector.enabled",
          "tip": [
            "Enables/disables SSL for REST TCP binary protocol"
          ]
        },
        {
          "label": "Enable SSL client auth",
          "id": "connectorSslClientAuth",
          "type": "check",
          "path": "connector",
          "model": "sslClientAuth",
          "disabled": "!backupItem.connector.enabled || !backupItem.connector.sslEnabled",
          "tip": [
            "Flag indicating whether or not SSL client authentication is required"
          ]
        },
        {
          "label": "SSL factory",
          "id": "connectorSslFactory",
          "type": "text",
          "path": "connector",
          "model": "sslFactory",
          "required": true,
          "disabled": "!backupItem.connector.enabled || !backupItem.connector.sslEnabled",
          "placeholder": "Enter fully qualified class name",
          "tip": [
            "Instance of Factory that will be used to create an instance of SSLContext for Secure Socket Layer on TCP binary protocol"
          ]
        }
      ]
    },
    {
      "label": "Class deployment",
      "group": "deployment",
      "previewMinLines": 1,
      "tip": [
        "Task and resources deployment in cluster"
      ],
      "fields": [
        {
          "label": "Deployment mode",
          "id": "deploymentMode",
          "type": "dropdown",
          "model": "deploymentMode",
          "placeholder": "SHARED",
          "items": "deploymentModes",
          "tip": [
            "Task classes and resources sharing mode",
            "The following deployment modes are supported:",
            "<ul>",
            "  <li>PRIVATE - in this mode deployed classes do not share resources</li>",
            "  <li>ISOLATED - in this mode tasks or classes deployed within the same class loader will share the same instances of resources</li>",
            "  <li>SHARED - same as ISOLATED, but now tasks from different master nodes with the same user version and same class loader will share the same class loader on remote nodes</li>",
            "  <li>CONTINUOUS - same as SHARED deployment mode, but resources will not be undeployed even after all master nodes left grid</li>",
            "</ul>"
          ]
        },
        {
          "label": "Enable peer class loading",
          "id": "peerClassLoadingEnabled",
          "type": "check",
          "model": "peerClassLoadingEnabled",
          "tip": [
            "Enables/disables peer class loading"
          ]
        },
        {
          "label": "Missed resources cache size",
          "id": "peerClassLoadingMissedResourcesCacheSize",
          "type": "number",
          "model": "peerClassLoadingMissedResourcesCacheSize",
          "hide": "!backupItem.peerClassLoadingEnabled",
          "placeholder": 100,
          "tip": [
            "If size greater than 0, missed resources will be cached and next resource request ignored",
            "If size is 0, then request for the resource will be sent to the remote node every time this resource is requested"
          ]
        },
        {
          "label": "Pool size",
          "id": "peerClassLoadingThreadPoolSize",
          "type": "number",
          "model": "peerClassLoadingThreadPoolSize",
          "hide": "!backupItem.peerClassLoadingEnabled",
          "placeholder": "availableProcessors",
          "tip": [
            "Thread pool size to use for peer class loading"
          ]
        },
        {
          "label": "Local class path exclude",
          "id": "peerClassLoadingLocalClassPathExclude",
          "type": "table-simple",
          "model": "peerClassLoadingLocalClassPathExclude",
          "hide": "!backupItem.peerClassLoadingEnabled",
          "focusId": "PeerClsPathExclude",
          "addTip": "Add package name",
          "removeTip": "Remove package name",
          "tableTip": [
            "List of packages from the system classpath that need to be peer-to-peer loaded from task originating node",
            "'*' is supported at the end of the package name which means that all sub-packages and their classes are included like in Java package import clause"
          ]
        }
      ]
    },
    {
      "label": "Discovery",
      "group": "discovery",
      "tip": [
        "Discovery properties configuration"
      ],
      "fields": [
        {
          "label": "Local address",
          "id": "discoLocalAddress",
          "type": "text",
          "path": "discovery",
          "model": "localAddress",
          "placeholder": "228.1.2.4",
          "tip": [
            "Local address"
          ]
        },
        {
          "label": "Local port",
          "id": "discoLocalPort",
          "type": "number",
          "path": "discovery",
          "model": "localPort",
          "min": 1024,
          "max": 65535,
          "placeholder": 47500,
          "tip": [
            "Local port which node uses"
          ]
        },
        {
          "label": "Local port range",
          "id": "discoLocalPortRange",
          "type": "number",
          "path": "discovery",
          "model": "localPortRange",
          "placeholder": 100,
          "tip": [
            "Local port range"
          ]
        },
        {
          "label": "Address resolver",
          "id": "discoAddressResolver",
          "type": "text",
          "path": "discovery",
          "model": "addressResolver",
          "placeholder": "Enter fully qualified class name",
          "tip": [
            "Class name of resolution between external and internal addresses provider"
          ]
        },
        {
          "label": "Socket timeout",
          "id": "socketTimeout",
          "type": "number",
          "path": "discovery",
          "model": "socketTimeout",
          "placeholder": 5000,
          "tip": [
            "Socket operations timeout"
          ]
        },
        {
          "label": "Acknowledgement timeout",
          "id": "ackTimeout",
          "type": "number",
          "path": "discovery",
          "model": "ackTimeout",
          "placeholder": 5000,
          "tip": [
            "Message acknowledgement timeout"
          ]
        },
        {
          "label": "Max acknowledgement timeout",
          "id": "maxAckTimeout",
          "type": "number",
          "path": "discovery",
          "model": "maxAckTimeout",
          "placeholder": 600000,
          "tip": [
            "Maximum message acknowledgement timeout"
          ]
        },
        {
          "label": "Network timeout",
          "id": "networkTimeout",
          "type": "number",
          "path": "discovery",
          "model": "networkTimeout",
          "placeholder": 5000,
          "tip": [
            "Network timeout"
          ]
        },
        {
          "label": "Join timeout",
          "id": "joinTimeout",
          "type": "number",
          "path": "discovery",
          "model": "joinTimeout",
          "placeholder": 0,
          "tip": [
            "Join timeout"
          ]
        },
        {
          "label": "Thread priority",
          "id": "threadPriority",
          "type": "number",
          "path": "discovery",
          "model": "threadPriority",
          "placeholder": 10,
          "tip": [
            "Thread priority for all threads started by SPI"
          ]
        },
        {
          "label": "Heartbeat frequency",
          "id": "heartbeatFrequency",
          "type": "number",
          "path": "discovery",
          "model": "heartbeatFrequency",
          "placeholder": 2000,
          "tip": [
            "Heartbeat messages issuing frequency"
          ]
        },
        {
          "label": "Max heartbeats miss w/o init",
          "id": "maxMissedHeartbeats",
          "type": "number",
          "path": "discovery",
          "model": "maxMissedHeartbeats",
          "placeholder": 1,
          "tip": [
            "Max heartbeats count node can miss without initiating status check"
          ]
        },
        {
          "label": "Max heartbeats miss w/o failing client node",
          "id": "maxMissedClientHeartbeats",
          "type": "number",
          "path": "discovery",
          "model": "maxMissedClientHeartbeats",
          "placeholder": 5,
          "tip": [
            "Max heartbeats count node can miss without failing client node"
          ]
        },
        {
          "label": "Topology history",
          "id": "topHistorySize",
          "type": "number",
          "path": "discovery",
          "model": "topHistorySize",
          "placeholder": 1000,
          "tip": [
            "Size of topology snapshots history"
          ]
        },
        {
          "label": "Discovery listener",
          "id": "discoListener",
          "type": "text",
          "path": "discovery",
          "model": "listener",
          "placeholder": "Enter fully qualified class name",
          "tip": [
            "Grid discovery listener"
          ]
        },
        {
          "label": "Data exchange",
          "id": "dataExchange",
          "type": "text",
          "path": "discovery",
          "model": "dataExchange",
          "placeholder": "Enter fully qualified class name",
          "tip": [
            "Class name of handler for initial data exchange between Ignite nodes"
          ]
        },
        {
          "label": "Metrics provider",
          "id": "metricsProvider",
          "type": "text",
          "path": "discovery",
          "model": "metricsProvider",
          "placeholder": "Enter fully qualified class name",
          "tip": [
            "Class name of metric provider to discovery SPI"
          ]
        },
        {
          "label": "Reconnect count",
          "id": "discoReconnectCount",
          "type": "number",
          "path": "discovery",
          "model": "reconnectCount",
          "placeholder": 10,
          "tip": [
            "Reconnect attempts count"
          ]
        },
        {
          "label": "Statistics frequency",
          "id": "statisticsPrintFrequency",
          "type": "number",
          "path": "discovery",
          "model": "statisticsPrintFrequency",
          "placeholder": 0,
          "tip": [
            "Statistics print frequency"
          ]
        },
        {
          "label": "IP finder clean frequency",
          "id": "ipFinderCleanFrequency",
          "type": "number",
          "path": "discovery",
          "model": "ipFinderCleanFrequency",
          "placeholder": 60000,
          "tip": [
            "IP finder clean frequency"
          ]
        },
        {
          "label": "Node authenticator",
          "id": "authenticator",
          "type": "text",
          "path": "discovery",
          "model": "authenticator",
          "placeholder": "Enter fully qualified class name",
          "tip": [
            "Node authenticator"
          ]
        },
        {
          "label": "Force server mode",
          "id": "forceServerMode",
          "type": "check",
          "path": "discovery",
          "model": "forceServerMode",
          "tip": [
            "Force server mode"
          ]
        },
        {
          "label": "Client reconnect disabled",
          "id": "clientReconnectDisabled",
          "type": "check",
          "path": "discovery",
          "model": "clientReconnectDisabled",
          "tip": [
            "Client reconnect disabled"
          ]
        }
      ]
    },
    {
      "label": "Events",
      "group": "events",
      "tip": [
        " Grid events are used for notification about what happens within the grid"
      ],
      "fields": [
        {
          "label": "Include type",
          "id": "includeEventTypes",
          "type": "dropdown-multiple",
          "model": "includeEventTypes",
          "placeholder": "Choose recorded event types",
          "items": "events",
          "tip": [
            "Array of event types, which will be recorded by GridEventStorageManager#record(Event)",
            "Note, that either the include event types or the exclude event types can be established"
          ]
        }
      ]
    },
    {
      "label": "IGFS",
      "group": "igfs",
      "tip": [
        "IGFS (Ignite In-Memory File System) configurations"
      ],
      "fields": [
        {
          "label": "IGFS",
          "id": "igfs",
          "type": "dropdown-multiple",
          "model": "igfss",
          "placeholder": "Choose IGFS",
          "placeholderEmpty": "No IGFS configured",
          "items": "igfss",
          "tip": [
            "Select IGFS to start in cluster or add a new IGFS"
          ],
          "addLink": {
            "ref": "/configuration/igfs?new"
          }
        }
      ]
    }
  ]
}
